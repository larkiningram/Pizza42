{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, PLATFORM_ID, Optional, EventEmitter, SecurityContext, Directive, ElementRef, Input, Output, NgModule } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { BehaviorSubject, EMPTY, throwError, from, zip, animationFrameScheduler } from 'rxjs';\nimport { filter, map, take, switchMap, tap, catchError } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { isPlatformBrowser, DOCUMENT } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\nconst HIGHLIGHT_OPTIONS = new InjectionToken('HIGHLIGHT_OPTIONS'); // @dynamic\n\nlet HighlightLoader = /*#__PURE__*/(() => {\n  class HighlightLoader {\n    constructor(doc, platformId, _options) {\n      this._options = _options; // Stream that emits when hljs library is loaded and ready to use\n\n      this._ready = new BehaviorSubject(null);\n      this.ready = this._ready.asObservable().pipe(filter(hljs => !!hljs), map(hljs => hljs), take(1)); // Check if hljs is already available\n\n      if (isPlatformBrowser(platformId) && doc.defaultView.hljs) {\n        this._ready.next(doc.defaultView.hljs);\n      } else {\n        // Load hljs library\n        this._loadLibrary().pipe(switchMap(hljs => {\n          if (this._options && this._options.lineNumbersLoader) {\n            // Make hljs available on window object (required for the line numbers library)\n            doc.defaultView.hljs = hljs; // Load line numbers library\n\n            return this.loadLineNumbers().pipe(tap(() => this._ready.next(hljs)));\n          } else {\n            this._ready.next(hljs);\n\n            return EMPTY;\n          }\n        }), catchError(e => {\n          console.error('[HLJS] ', e);\n          return EMPTY;\n        })).subscribe();\n      }\n    }\n    /**\n     * Lazy-Load highlight.js library\n     */\n\n\n    _loadLibrary() {\n      if (this._options) {\n        if (this._options.fullLibraryLoader && this._options.coreLibraryLoader) {\n          return throwError('The full library and the core library were imported, only one of them should be imported!');\n        }\n\n        if (this._options.fullLibraryLoader && this._options.languages) {\n          return throwError('The highlighting languages were imported they are not needed!');\n        }\n\n        if (this._options.coreLibraryLoader && !this._options.languages) {\n          return throwError('The highlighting languages were not imported!');\n        }\n\n        if (!this._options.coreLibraryLoader && this._options.languages) {\n          return throwError('The core library was not imported!');\n        }\n\n        if (this._options.fullLibraryLoader) {\n          return this.loadFullLibrary();\n        }\n\n        if (this._options.coreLibraryLoader && this._options.languages && Object.keys(this._options.languages).length) {\n          return this.loadCoreLibrary().pipe(switchMap(hljs => this._loadLanguages(hljs)));\n        }\n      }\n\n      return throwError('Highlight.js library was not imported!');\n    }\n    /**\n     * Lazy-load highlight.js languages\n     */\n\n\n    _loadLanguages(hljs) {\n      const languages = Object.entries(this._options.languages).map(([langName, langLoader]) => importModule(langLoader()).pipe(tap(langFunc => hljs.registerLanguage(langName, langFunc))));\n      return zip(...languages).pipe(map(() => hljs));\n    }\n    /**\n     * Import highlight.js core library\n     */\n\n\n    loadCoreLibrary() {\n      return importModule(this._options.coreLibraryLoader());\n    }\n    /**\n     * Import highlight.js library with all languages\n     */\n\n\n    loadFullLibrary() {\n      return importModule(this._options.fullLibraryLoader());\n    }\n    /**\n     * Import line numbers library\n     */\n\n\n    loadLineNumbers() {\n      return importModule(this._options.lineNumbersLoader());\n    }\n\n  }\n\n  HighlightLoader.ɵfac = function HighlightLoader_Factory(t) {\n    return new (t || HighlightLoader)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(HIGHLIGHT_OPTIONS, 8));\n  };\n\n  HighlightLoader.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function HighlightLoader_Factory() {\n      return new HighlightLoader(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(HIGHLIGHT_OPTIONS, 8));\n    },\n    token: HighlightLoader,\n    providedIn: \"root\"\n  });\n  return HighlightLoader;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Map loader response to module object\n */\n\n\nconst importModule = moduleLoader => {\n  return from(moduleLoader).pipe(filter(module => !!module && !!module.default), map(module => module.default));\n};\n\nconst ɵ0 = importModule;\nlet HighlightJS = /*#__PURE__*/(() => {\n  class HighlightJS {\n    constructor(_loader, options) {\n      this._loader = _loader;\n      this._hljs = null; // Load highlight.js library on init\n\n      _loader.ready.pipe().subscribe(hljs => {\n        this._hljs = hljs;\n\n        if (options && options.config) {\n          // Set global config if present\n          hljs.configure(options.config);\n\n          if (hljs.listLanguages().length < 1) {\n            console.error('[HighlightJS]: No languages were registered!');\n          }\n        }\n      });\n    } // A reference for hljs library\n\n\n    get hljs() {\n      return this._hljs;\n    }\n    /**\n     * Core highlighting function.\n     * @param name Accepts a language name, or an alias\n     * @param value A string with the code to highlight.\n     * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish\n     * even in case of detecting illegal syntax for the language instead of throwing an exception.\n     * @param continuation An optional mode stack representing unfinished parsing.\n     * When present, the function will restart parsing from this state instead of initializing a new one\n     */\n\n\n    highlight(name, value, ignore_illegals, continuation) {\n      return this._loader.ready.pipe(map(hljs => hljs.highlight(name, value, ignore_illegals, continuation)));\n    }\n    /**\n     * Highlighting with language detection.\n     * @param value Accepts a string with the code to highlight\n     * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\n     * The subset can also be set with configure, but the local parameter overrides the option if set.\n     */\n\n\n    highlightAuto(value, languageSubset) {\n      return this._loader.ready.pipe(map(hljs => hljs.highlightAuto(value, languageSubset)));\n    }\n    /**\n     * Post-processing of the highlighted markup.\n     * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.\n     * Options are set globally with configure.\n     * @param value Accepts a string with the highlighted markup\n     */\n\n\n    fixMarkup(value) {\n      return this._loader.ready.pipe(map(hljs => hljs.fixMarkup(value)));\n    }\n    /**\n     * Applies highlighting to a DOM node containing code.\n     * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.\n     * See the class reference for all available language names and aliases.\n     * @param block The element to apply highlight on.\n     */\n\n\n    highlightBlock(block) {\n      return this._loader.ready.pipe(map(hljs => hljs.highlightBlock(block)));\n    }\n    /**\n     * Configures global options:\n     * @param config HighlightJs configuration argument\n     */\n\n\n    configure(config) {\n      return this._loader.ready.pipe(map(hljs => hljs.configure(config)));\n    }\n    /**\n     * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\n     */\n\n\n    initHighlighting() {\n      return this._loader.ready.pipe(map(hljs => hljs.initHighlighting()));\n    }\n    /**\n     * Adds new language to the library under the specified name. Used mostly internally.\n     * @param name A string with the name of the language being registered\n     * @param language A function that returns an object which represents the language definition.\n     * The function is passed the hljs object to be able to use common regular expressions defined within it.\n     */\n\n\n    registerLanguage(name, language) {\n      return this._loader.ready.pipe(tap(hljs => hljs.registerLanguage(name, language)));\n    }\n    /**\n     * @return The languages names list.\n     */\n\n\n    listLanguages() {\n      return this._loader.ready.pipe(map(hljs => hljs.listLanguages()));\n    }\n    /**\n     * Looks up a language by name or alias.\n     * @param name Language name\n     * @return The language object if found, undefined otherwise.\n     */\n\n\n    getLanguage(name) {\n      return this._loader.ready.pipe(map(hljs => hljs.getLanguage(name)));\n    }\n    /**\n     * Display line numbers\n     * @param el Code element\n     */\n\n\n    lineNumbersBlock(el) {\n      return this._loader.ready.pipe(filter(hljs => !!hljs.lineNumbersBlock), tap(hljs => hljs.lineNumbersBlock(el)));\n    }\n\n  }\n\n  HighlightJS.ɵfac = function HighlightJS_Factory(t) {\n    return new (t || HighlightJS)(ɵngcc0.ɵɵinject(HighlightLoader), ɵngcc0.ɵɵinject(HIGHLIGHT_OPTIONS, 8));\n  };\n\n  HighlightJS.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function HighlightJS_Factory() {\n      return new HighlightJS(i0.ɵɵinject(HighlightLoader), i0.ɵɵinject(HIGHLIGHT_OPTIONS, 8));\n    },\n    token: HighlightJS,\n    providedIn: \"root\"\n  });\n  return HighlightJS;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet Highlight = /*#__PURE__*/(() => {\n  class Highlight {\n    constructor(el, _hljs, _sanitizer, _options) {\n      this._hljs = _hljs;\n      this._sanitizer = _sanitizer;\n      this._options = _options; // Stream that emits when code string is highlighted\n\n      this.highlighted = new EventEmitter();\n      this._nativeElement = el.nativeElement;\n    }\n\n    ngOnChanges(changes) {\n      if (this.code && changes.code && typeof changes.code.currentValue !== 'undefined' && changes.code.currentValue !== changes.code.previousValue) {\n        this.highlightElement(this.code, this.languages);\n      }\n    }\n    /**\n     * Highlighting with language detection and fix markup.\n     * @param code Accepts a string with the code to highlight\n     * @param languages An optional array of language names and aliases restricting detection to only those languages.\n     * The subset can also be set with configure, but the local parameter overrides the option if set.\n     */\n\n\n    highlightElement(code, languages) {\n      // Set code text before highlighting\n      this.setTextContent(code);\n\n      this._hljs.highlightAuto(code, languages).subscribe(res => {\n        // Set highlighted code\n        this.setInnerHTML(res.value); // Check if user want to show line numbers\n\n        if (this.lineNumbers && this._options && this._options.lineNumbersLoader) {\n          this.addLineNumbers();\n        } // Forward highlight response to the highlighted output\n\n\n        this.highlighted.emit(res);\n      });\n    }\n\n    addLineNumbers() {\n      // Clean up line numbers observer\n      this.destroyLineNumbersObserver();\n      animationFrameScheduler.schedule(() => {\n        // Add line numbers\n        this._hljs.lineNumbersBlock(this._nativeElement).subscribe(); // If lines count is 1, the line numbers library will not add numbers\n        // Observe changes to add 'hljs-line-numbers' class only when line numbers is added to the code element\n\n\n        this._lineNumbersObs = new MutationObserver(() => {\n          if (this._nativeElement.firstElementChild && this._nativeElement.firstElementChild.tagName.toUpperCase() === 'TABLE') {\n            this._nativeElement.classList.add('hljs-line-numbers');\n          }\n\n          this.destroyLineNumbersObserver();\n        });\n\n        this._lineNumbersObs.observe(this._nativeElement, {\n          childList: true\n        });\n      });\n    }\n\n    destroyLineNumbersObserver() {\n      if (this._lineNumbersObs) {\n        this._lineNumbersObs.disconnect();\n\n        this._lineNumbersObs = null;\n      }\n    }\n\n    setTextContent(content) {\n      animationFrameScheduler.schedule(() => this._nativeElement.textContent = content);\n    }\n\n    setInnerHTML(content) {\n      animationFrameScheduler.schedule(() => this._nativeElement.innerHTML = this._sanitizer.sanitize(SecurityContext.HTML, content) || '');\n    }\n\n  }\n\n  Highlight.ɵfac = function Highlight_Factory(t) {\n    return new (t || Highlight)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(HighlightJS), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(HIGHLIGHT_OPTIONS, 8));\n  };\n\n  Highlight.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: Highlight,\n    selectors: [[\"\", \"highlight\", \"\"]],\n    hostVars: 2,\n    hostBindings: function Highlight_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"hljs\", true);\n      }\n    },\n    inputs: {\n      code: [\"highlight\", \"code\"],\n      languages: \"languages\",\n      lineNumbers: \"lineNumbers\"\n    },\n    outputs: {\n      highlighted: \"highlighted\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return Highlight;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet HighlightModule = /*#__PURE__*/(() => {\n  class HighlightModule {}\n\n  HighlightModule.ɵfac = function HighlightModule_Factory(t) {\n    return new (t || HighlightModule)();\n  };\n\n  HighlightModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: HighlightModule\n  });\n  HighlightModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return HighlightModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HighlightModule, {\n    declarations: [Highlight],\n    exports: [Highlight]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { HIGHLIGHT_OPTIONS, Highlight, HighlightJS, HighlightLoader, HighlightModule, ɵ0 }; //# sourceMappingURL=ngx-highlightjs.js.map","map":null,"metadata":{},"sourceType":"module"}