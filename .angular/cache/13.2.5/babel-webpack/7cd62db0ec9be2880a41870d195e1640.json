{"ast":null,"code":"import config from '../../auth_config.json';\nimport { concatMap } from 'rxjs/operators';\nimport { environment as env } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@auth0/auth0-angular\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http, auth) {\n      this.http = http;\n      this.auth = auth;\n      this.data = {};\n    }\n\n    ping$() {\n      console.log(config.apiUri);\n      return this.http.get(`${config.apiUri}/api/external`);\n    }\n\n    getUserData$() {\n      return this.auth.user$.pipe(concatMap(user => // Use HttpClient to make the call\n      this.http.get(encodeURI(`${env.auth.audience}users/${user.sub}`))));\n    }\n\n    order$(order, meta) {\n      this.auth.getAccessTokenSilently().subscribe(res => {\n        console.log('in api');\n        const headers = {\n          'authorization': `Bearer ${res}`,\n          'content-type': 'application/json'\n        };\n        console.log('order', order);\n        console.log('meta', meta);\n        console.log('meta.order', meta.orders);\n        const add = {\n          \"user_metadata\": {\n            \"orders\": [...order, ...meta.orders]\n          }\n        };\n        console.log('add', add);\n        const options = {\n          headers: headers,\n          options: add\n        };\n        this.auth.user$.subscribe(user => {\n          this.http.patch(encodeURI(`${env.auth.audience}users/${user.sub}`), JSON.stringify(add), options).subscribe(res => console.log('res', res));\n        });\n      });\n      return this.getUserData$();\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}